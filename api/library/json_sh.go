package library

//go:generate ./json.sh

import (
	"context"
	"os"

	"github.com/go-resty/resty/v2"

	"github.com/justprintit/mmf/api/library/json"
)

// Code generated by ./json.sh DO NOT EDIT

// pulls all data from the server
func (c *Client) RefreshLibraries(ctx context.Context) error {
	// load persistent data
	if err := c.Reload(); err != nil {
		return err
	}

	// schedule downloads to refresh libraries
	c.ScheduleLibraryPageRequest("shared", 0, &json.Users{}, refreshSharedLibraryCallback)
	c.ScheduleLibraryPageRequest("purchases", 0, &json.Objects{}, refreshPurchasesLibraryCallback)
	c.ScheduleLibraryPageRequest("campaigns", 0, &json.Objects{}, refreshPledgesLibraryCallback)
	c.ScheduleLibraryPageRequest("tribes", 0, &json.Tribes{}, refreshTribesLibraryCallback)

	return nil
}

// get first page of JSON data of Shared library
func (c *Client) GetSharedLibrary(ctx context.Context) (*json.Users, error) {
	return c.GetSharedLibraryPage(ctx, 0)
}

// get requested page of JSON data of Shared library
func (c *Client) GetSharedLibraryPage(ctx context.Context, page int) (*json.Users, error) {
	out := &json.Users{}

	resp, err := c.GetLibraryPage(ctx, "shared", page, out)
	if err != nil {
		os.Stdout.Write(resp.Body())
	}

	return out, err
}

// pull first page of Shared library
func (c *Client) RefreshSharedLibrary(ctx context.Context) error {
	c.ScheduleLibraryRequest("shared", &json.Users{}, refreshSharedLibraryCallback)
	return nil
}

// handle first page of Shared library
func refreshSharedLibraryCallback(c *Client, ctx context.Context, resp *resty.Response) error {
	d := resp.Result().(*json.Users)

	// pagination
	p := c.PagesN(len(d.Items), d.Count)

	// schedule further pages if needed
	page, offset, ok := p.Next(1)
	for ok {
		off := offset
		c.ScheduleLibraryPageRequest("shared", page, &json.Users{}, func(c *Client, ctx context.Context, resp *resty.Response) error {
			d := resp.Result().(*json.Users)
			return c.refreshSharedLibrary(ctx, off, d.Items...)
		})

		// next page
		page, offset, ok = p.Next(page)
	}

	// and process first page
	return c.refreshSharedLibrary(ctx, 0, d.Items...)
}

// get first page of JSON data of Purchases library
func (c *Client) GetPurchasesLibrary(ctx context.Context) (*json.Objects, error) {
	return c.GetPurchasesLibraryPage(ctx, 0)
}

// get requested page of JSON data of Purchases library
func (c *Client) GetPurchasesLibraryPage(ctx context.Context, page int) (*json.Objects, error) {
	out := &json.Objects{}

	resp, err := c.GetLibraryPage(ctx, "purchases", page, out)
	if err != nil {
		os.Stdout.Write(resp.Body())
	}

	return out, err
}

// pull first page of Purchases library
func (c *Client) RefreshPurchasesLibrary(ctx context.Context) error {
	c.ScheduleLibraryRequest("purchases", &json.Objects{}, refreshPurchasesLibraryCallback)
	return nil
}

// handle first page of Purchases library
func refreshPurchasesLibraryCallback(c *Client, ctx context.Context, resp *resty.Response) error {
	d := resp.Result().(*json.Objects)

	// pagination
	p := c.PagesN(len(d.Items), d.Count)

	// schedule further pages if needed
	page, offset, ok := p.Next(1)
	for ok {
		off := offset
		c.ScheduleLibraryPageRequest("purchases", page, &json.Objects{}, func(c *Client, ctx context.Context, resp *resty.Response) error {
			d := resp.Result().(*json.Objects)
			return c.refreshPurchasesLibrary(ctx, off, d.Items...)
		})

		// next page
		page, offset, ok = p.Next(page)
	}

	// and process first page
	return c.refreshPurchasesLibrary(ctx, 0, d.Items...)
}

// get first page of JSON data of Pledges library
func (c *Client) GetPledgesLibrary(ctx context.Context) (*json.Objects, error) {
	return c.GetPledgesLibraryPage(ctx, 0)
}

// get requested page of JSON data of Pledges library
func (c *Client) GetPledgesLibraryPage(ctx context.Context, page int) (*json.Objects, error) {
	out := &json.Objects{}

	resp, err := c.GetLibraryPage(ctx, "campaigns", page, out)
	if err != nil {
		os.Stdout.Write(resp.Body())
	}

	return out, err
}

// pull first page of Pledges library
func (c *Client) RefreshPledgesLibrary(ctx context.Context) error {
	c.ScheduleLibraryRequest("campaigns", &json.Objects{}, refreshPledgesLibraryCallback)
	return nil
}

// handle first page of Pledges library
func refreshPledgesLibraryCallback(c *Client, ctx context.Context, resp *resty.Response) error {
	d := resp.Result().(*json.Objects)

	// pagination
	p := c.PagesN(len(d.Items), d.Count)

	// schedule further pages if needed
	page, offset, ok := p.Next(1)
	for ok {
		off := offset
		c.ScheduleLibraryPageRequest("campaigns", page, &json.Objects{}, func(c *Client, ctx context.Context, resp *resty.Response) error {
			d := resp.Result().(*json.Objects)
			return c.refreshPledgesLibrary(ctx, off, d.Items...)
		})

		// next page
		page, offset, ok = p.Next(page)
	}

	// and process first page
	return c.refreshPledgesLibrary(ctx, 0, d.Items...)
}

// get first page of JSON data of Tribes library
func (c *Client) GetTribesLibrary(ctx context.Context) (*json.Tribes, error) {
	return c.GetTribesLibraryPage(ctx, 0)
}

// get requested page of JSON data of Tribes library
func (c *Client) GetTribesLibraryPage(ctx context.Context, page int) (*json.Tribes, error) {
	out := &json.Tribes{}

	resp, err := c.GetLibraryPage(ctx, "tribes", page, out)
	if err != nil {
		os.Stdout.Write(resp.Body())
	}

	return out, err
}

// pull first page of Tribes library
func (c *Client) RefreshTribesLibrary(ctx context.Context) error {
	c.ScheduleLibraryRequest("tribes", &json.Tribes{}, refreshTribesLibraryCallback)
	return nil
}

// handle first page of Tribes library
func refreshTribesLibraryCallback(c *Client, ctx context.Context, resp *resty.Response) error {
	d := resp.Result().(*json.Tribes)

	// pagination
	p := c.Pages(len(d.Items), d.Count)

	// schedule further pages if needed
	page, offset, ok := p.Next(1)
	for ok {
		off := offset
		c.ScheduleLibraryPageRequest("tribes", page, &json.Tribes{}, func(c *Client, ctx context.Context, resp *resty.Response) error {
			d := resp.Result().(*json.Tribes)
			return c.refreshTribesLibrary(ctx, off, d.Items...)
		})

		// next page
		page, offset, ok = p.Next(page)
	}

	// and process first page
	return c.refreshTribesLibrary(ctx, 0, d.Items...)
}
