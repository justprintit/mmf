package library

//go:generate ./refresh.sh

import (
	"context"

	"github.com/go-resty/resty/v2"

	"github.com/justprintit/mmf/api/library/json"
)

// Code generated by ./refresh.sh DO NOT EDIT

// pulls all data from the server
func (c *Client) RefreshLibraries(ctx context.Context) error {
	// load persistent data
	if err := c.Reload(); err != nil {
		return err
	}

	// schedule downloads to refresh libraries
	c.SchedulePageRequest(json.SharedLibraryRequest, 0, refreshSharedLibraryCallback)
	c.SchedulePageRequest(json.PurchasesLibraryRequest, 0, refreshPurchasesLibraryCallback)
	c.SchedulePageRequest(json.PledgesLibraryRequest, 0, refreshPledgesLibraryCallback)
	c.SchedulePageRequest(json.TribesLibraryRequest, 0, refreshTribesLibraryCallback)

	return nil
}

// pull first page of Shared library
func (c *Client) RefreshSharedLibrary(ctx context.Context) error {
	c.SchedulePageRequest(json.SharedLibraryRequest, 0, refreshSharedLibraryCallback)
	return nil
}

// handle first page of Shared library
func refreshSharedLibraryCallback(c *Client, ctx context.Context, resp *resty.Response) error {
	d := json.SharedLibraryResult(resp)

	// pagination
	p := c.PagesN(len(d.Items), d.Count)

	// schedule further pages if needed
	page, offset, ok := p.Next(1)
	for ok {
		off := offset
		c.SchedulePageRequest(json.SharedLibraryRequest, page, func(c *Client, ctx context.Context, resp *resty.Response) error {
			d := json.SharedLibraryResult(resp)
			return c.refreshSharedLibrary(ctx, off, d.Items...)
		})

		// next page
		page, offset, ok = p.Next(page)
	}

	// and process first page
	return c.refreshSharedLibrary(ctx, 0, d.Items...)
}

// pull first page of Purchases library
func (c *Client) RefreshPurchasesLibrary(ctx context.Context) error {
	c.SchedulePageRequest(json.PurchasesLibraryRequest, 0, refreshPurchasesLibraryCallback)
	return nil
}

// handle first page of Purchases library
func refreshPurchasesLibraryCallback(c *Client, ctx context.Context, resp *resty.Response) error {
	d := json.PurchasesLibraryResult(resp)

	// pagination
	p := c.PagesN(len(d.Items), d.Count)

	// schedule further pages if needed
	page, offset, ok := p.Next(1)
	for ok {
		off := offset
		c.SchedulePageRequest(json.PurchasesLibraryRequest, page, func(c *Client, ctx context.Context, resp *resty.Response) error {
			d := json.PurchasesLibraryResult(resp)
			return c.refreshPurchasesLibrary(ctx, off, d.Items...)
		})

		// next page
		page, offset, ok = p.Next(page)
	}

	// and process first page
	return c.refreshPurchasesLibrary(ctx, 0, d.Items...)
}

// pull first page of Pledges library
func (c *Client) RefreshPledgesLibrary(ctx context.Context) error {
	c.SchedulePageRequest(json.PledgesLibraryRequest, 0, refreshPledgesLibraryCallback)
	return nil
}

// handle first page of Pledges library
func refreshPledgesLibraryCallback(c *Client, ctx context.Context, resp *resty.Response) error {
	d := json.PledgesLibraryResult(resp)

	// pagination
	p := c.PagesN(len(d.Items), d.Count)

	// schedule further pages if needed
	page, offset, ok := p.Next(1)
	for ok {
		off := offset
		c.SchedulePageRequest(json.PledgesLibraryRequest, page, func(c *Client, ctx context.Context, resp *resty.Response) error {
			d := json.PledgesLibraryResult(resp)
			return c.refreshPledgesLibrary(ctx, off, d.Items...)
		})

		// next page
		page, offset, ok = p.Next(page)
	}

	// and process first page
	return c.refreshPledgesLibrary(ctx, 0, d.Items...)
}

// pull first page of Tribes library
func (c *Client) RefreshTribesLibrary(ctx context.Context) error {
	c.SchedulePageRequest(json.TribesLibraryRequest, 0, refreshTribesLibraryCallback)
	return nil
}

// handle first page of Tribes library
func refreshTribesLibraryCallback(c *Client, ctx context.Context, resp *resty.Response) error {
	d := json.TribesLibraryResult(resp)

	// pagination
	p := c.Pages(len(d.Items), d.Count)

	// schedule further pages if needed
	page, offset, ok := p.Next(1)
	for ok {
		off := offset
		c.SchedulePageRequest(json.TribesLibraryRequest, page, func(c *Client, ctx context.Context, resp *resty.Response) error {
			d := json.TribesLibraryResult(resp)
			return c.refreshTribesLibrary(ctx, off, d.Items...)
		})

		// next page
		page, offset, ok = p.Next(page)
	}

	// and process first page
	return c.refreshTribesLibrary(ctx, 0, d.Items...)
}
