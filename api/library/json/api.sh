#!/bin/sh

set -eu

F="${0%.sh}_sh.go"
trap "rm -f '$F~'" EXIT
exec > "$F~"

# Prelude
#
cat <<EOT
package json

//go:generate $0

import (
	"github.com/go-resty/resty/v2"

	"github.com/justprintit/mmf/api/client"
)

// Code generated by $0 DO NOT EDIT
EOT

TYPES=
TYPES="${TYPES:+$TYPES }UserSharedGroup:"
TYPES="${TYPES:+$TYPES }UserSharedLibrary"
TYPES="${TYPES:+$TYPES }PledgesLibrary:"
TYPES="${TYPES:+$TYPES }PurchasesLibrary:"
TYPES="${TYPES:+$TYPES }SharedLibrary:Users"
TYPES="${TYPES:+$TYPES }TribesLibrary:Tribes"

TYPES_PAGES="$(for x in $TYPES; do
	t="${x#*:}"
	[ -n "$t" ] || t=Objects
	echo "$t"
	done | sort -u)"
for t in $TYPES_PAGES; do

	# FooPages()
	#
	case "$t" in
	UserSharedLibrary)
		continue # skip
		;;
	Groups|Tribes)
		pages=Pages
		;;
	*)
		pages=PagesN
		;;
	esac

	cat <<EOT

// works out if a $t response needs more pages
func ${t}Pages(d *$t) *client.Pagination {
	return client.$pages(len(d.Items), d.Count)
}
EOT
done

for x in $TYPES; do
	N="${x%:*}"
	t="${x#*:}"
	[ -n "$t" ] || t=Objects

	# static RequestOptions
	case "$N" in
	UserSharedLibrary)
		;; # skip
	*Library)
		n="${N%Library}"
		g="$(echo "$n" | tr 'A-Z' 'a-z')"
		v="$g"

		case "$n" in
		Pledges)
			g="campaigns"
			v="$g"
			;;
		Tribes)
			v="my-$g"
			;;
		esac
cat <<EOT

// $n
var ${N}Request = client.RequestOptions{
	Accept:  "application/json",
	Referer: "/library/?v=$v",
	Path:    "/data-library/$g",
	Method:  "GET",
	Result:  $t{},
}
EOT
		;;
	esac

cat <<EOT

// ${N}Result() pulls a *$t out of a resty.Response
func ${N}Result(resp *resty.Response) *$t {
	if out := resp.Result(); out != nil {
		return out.(*$t)
	}
	return nil
}
EOT

done

if [ -z "$TYPES" ]; then
	cat <<EOT

func init() {
	// avoid "imported and not used" errors
	_ = resty.New
}
EOT
fi

if ! diff -u "$F" "$F~" >&2; then
	mv "$F~" "$F"
fi
