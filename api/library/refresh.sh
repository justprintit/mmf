#!/bin/sh

set -eu

F="${0%.sh}_sh.go"
trap "rm -f '$F~'" EXIT
exec > "$F~"

LIBRARIES=
LIBRARIES="${LIBRARIES:+$LIBRARIES }Shared:Users"
LIBRARIES="${LIBRARIES:+$LIBRARIES }Purchases:Objects"
LIBRARIES="${LIBRARIES:+$LIBRARIES }Pledges:Objects"
LIBRARIES="${LIBRARIES:+$LIBRARIES }Tribes"

# Prelude
#
cat <<EOT
package library

//go:generate $0

import (
	"context"

	"github.com/go-resty/resty/v2"

	"github.com/justprintit/mmf/api/library/json"
)

// Code generated by $0 DO NOT EDIT
EOT

# RefreshLibraries()
#
cat <<EOT

// pulls all data from the server
func (c *Client) RefreshLibraries(ctx context.Context) error {
	// load persistent data
	if err := c.Reload(); err != nil {
		return err
	}

	// schedule downloads to refresh libraries
EOT

for x in $LIBRARIES; do
	n="${x%:*}"
cat <<EOT
	c.SchedulePageRequest(json.${n}LibraryRequest, 0, refresh${n}LibraryCallback)
EOT
done

cat <<EOT

	return nil
}
EOT

# RefreshFooLibrary()
#
for x in $LIBRARIES; do
	n="${x%:*}"
	t="${x#*:}"

cat <<EOT

// pull first page of $n library
func (c *Client) Refresh${n}Library(ctx context.Context) error {
	c.SchedulePageRequest(json.${n}LibraryRequest, 0, refresh${n}LibraryCallback)
	return nil
}

// handle first page of $n library
func refresh${n}LibraryCallback(c *Client, ctx context.Context, resp *resty.Response) error {
	d := json.${n}LibraryResult(resp)

	// pagination
	p := json.${t}Pages(d)

	// schedule further pages if needed
	page, offset, ok := p.Next(1)
	for ok {
		off := offset
		c.SchedulePageRequest(json.${n}LibraryRequest, page, func(c *Client, ctx context.Context, resp *resty.Response) error {
			d := json.${n}LibraryResult(resp)
			return c.refresh${n}Library(ctx, off, d.Items...)
		})

		// next page
		page, offset, ok = p.Next(page)
	}

	// and process first page
	return c.refresh${n}Library(ctx, 0, d.Items...)
}
EOT
done

if [ -z "$LIBRARIES" ]; then
	cat <<EOT

func init() {
	// avoid "imported and not used" errors
	_ = resty.New
	_ = json.Write
}
EOT
fi

if ! diff -u "$F" "$F~" >&2; then
	mv "$F~" "$F"
fi
