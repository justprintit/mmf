// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package openapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCategories request
	GetCategories(ctx context.Context, params *GetCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCategoriesCategoryId request
	GetCategoriesCategoryId(ctx context.Context, categoryId CategoryId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCollections request
	GetCollections(ctx context.Context, params *GetCollectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCollectionsCollectionId request
	GetCollectionsCollectionId(ctx context.Context, collectionId CollectionId, params *GetCollectionsCollectionIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFile request
	PostFile(ctx context.Context, params *PostFileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFilesFileId request
	GetFilesFileId(ctx context.Context, fileId FileId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostImage request
	PostImage(ctx context.Context, params *PostImageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchObject request with any body
	PatchObjectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchObject(ctx context.Context, body PatchObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostObject request with any body
	PostObjectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostObject(ctx context.Context, body PostObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObjectsObjectId request
	GetObjectsObjectId(ctx context.Context, objectId ObjectId, params *GetObjectsObjectIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObjectsObjectIdFiles request
	GetObjectsObjectIdFiles(ctx context.Context, objectId ObjectId, params *GetObjectsObjectIdFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObjectsObjectIdPrints request
	GetObjectsObjectIdPrints(ctx context.Context, objectId ObjectId, params *GetObjectsObjectIdPrintsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObjectsObjectIdUploadStatus request
	GetObjectsObjectIdUploadStatus(ctx context.Context, objectId ObjectId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSearch request
	GetSearch(ctx context.Context, params *GetSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersUsername request
	GetUsersUsername(ctx context.Context, username Username, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersUsernameCollections request
	GetUsersUsernameCollections(ctx context.Context, username Username, params *GetUsersUsernameCollectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersUsernameCollectionsCollectionSlug request
	GetUsersUsernameCollectionsCollectionSlug(ctx context.Context, username Username, collectionSlug CollectionSlug, params *GetUsersUsernameCollectionsCollectionSlugParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersUsernameFollowers request
	GetUsersUsernameFollowers(ctx context.Context, username Username, params *GetUsersUsernameFollowersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersUsernameFollowing request
	GetUsersUsernameFollowing(ctx context.Context, username Username, params *GetUsersUsernameFollowingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersUsernameObjects request
	GetUsersUsernameObjects(ctx context.Context, username Username, params *GetUsersUsernameObjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersUsernameObjectsLiked request
	GetUsersUsernameObjectsLiked(ctx context.Context, username Username, params *GetUsersUsernameObjectsLikedParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCategories(ctx context.Context, params *GetCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCategoriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCategoriesCategoryId(ctx context.Context, categoryId CategoryId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCategoriesCategoryIdRequest(c.Server, categoryId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCollections(ctx context.Context, params *GetCollectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCollectionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCollectionsCollectionId(ctx context.Context, collectionId CollectionId, params *GetCollectionsCollectionIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCollectionsCollectionIdRequest(c.Server, collectionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFile(ctx context.Context, params *PostFileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFileRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFilesFileId(ctx context.Context, fileId FileId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFilesFileIdRequest(c.Server, fileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostImage(ctx context.Context, params *PostImageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostImageRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchObjectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchObjectRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchObject(ctx context.Context, body PatchObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchObjectRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObjectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObjectRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObject(ctx context.Context, body PostObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObjectRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObjectsObjectId(ctx context.Context, objectId ObjectId, params *GetObjectsObjectIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectsObjectIdRequest(c.Server, objectId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObjectsObjectIdFiles(ctx context.Context, objectId ObjectId, params *GetObjectsObjectIdFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectsObjectIdFilesRequest(c.Server, objectId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObjectsObjectIdPrints(ctx context.Context, objectId ObjectId, params *GetObjectsObjectIdPrintsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectsObjectIdPrintsRequest(c.Server, objectId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObjectsObjectIdUploadStatus(ctx context.Context, objectId ObjectId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectsObjectIdUploadStatusRequest(c.Server, objectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSearch(ctx context.Context, params *GetSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersUsername(ctx context.Context, username Username, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersUsernameRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersUsernameCollections(ctx context.Context, username Username, params *GetUsersUsernameCollectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersUsernameCollectionsRequest(c.Server, username, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersUsernameCollectionsCollectionSlug(ctx context.Context, username Username, collectionSlug CollectionSlug, params *GetUsersUsernameCollectionsCollectionSlugParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersUsernameCollectionsCollectionSlugRequest(c.Server, username, collectionSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersUsernameFollowers(ctx context.Context, username Username, params *GetUsersUsernameFollowersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersUsernameFollowersRequest(c.Server, username, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersUsernameFollowing(ctx context.Context, username Username, params *GetUsersUsernameFollowingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersUsernameFollowingRequest(c.Server, username, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersUsernameObjects(ctx context.Context, username Username, params *GetUsersUsernameObjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersUsernameObjectsRequest(c.Server, username, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersUsernameObjectsLiked(ctx context.Context, username Username, params *GetUsersUsernameObjectsLikedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersUsernameObjectsLikedRequest(c.Server, username, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCategoriesRequest generates requests for GetCategories
func NewGetCategoriesRequest(server string, params *GetCategoriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Top != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "top", runtime.ParamLocationQuery, *params.Top); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCategoriesCategoryIdRequest generates requests for GetCategoriesCategoryId
func NewGetCategoriesCategoryIdRequest(server string, categoryId CategoryId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "category_id", runtime.ParamLocationPath, categoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/categories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCollectionsRequest generates requests for GetCollections
func NewGetCollectionsRequest(server string, params *GetCollectionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCollectionsCollectionIdRequest generates requests for GetCollectionsCollectionId
func NewGetCollectionsCollectionIdRequest(server string, collectionId CollectionId, params *GetCollectionsCollectionIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collection_id", runtime.ParamLocationPath, collectionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostFileRequest generates requests for PostFile
func NewPostFileRequest(server string, params *PostFileParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/file")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "upload_id", runtime.ParamLocationQuery, params.UploadId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFilesFileIdRequest generates requests for GetFilesFileId
func NewGetFilesFileIdRequest(server string, fileId FileId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "file_id", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostImageRequest generates requests for PostImage
func NewPostImageRequest(server string, params *PostImageParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/image")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "upload_id", runtime.ParamLocationQuery, params.UploadId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchObjectRequest calls the generic PatchObject builder with application/json body
func NewPatchObjectRequest(server string, body PatchObjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchObjectRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchObjectRequestWithBody generates requests for PatchObject with any type of body
func NewPatchObjectRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostObjectRequest calls the generic PostObject builder with application/json body
func NewPostObjectRequest(server string, body PostObjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostObjectRequestWithBody(server, "application/json", bodyReader)
}

// NewPostObjectRequestWithBody generates requests for PostObject with any type of body
func NewPostObjectRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetObjectsObjectIdRequest generates requests for GetObjectsObjectId
func NewGetObjectsObjectIdRequest(server string, objectId ObjectId, params *GetObjectsObjectIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "object_id", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/objects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetObjectsObjectIdFilesRequest generates requests for GetObjectsObjectIdFiles
func NewGetObjectsObjectIdFilesRequest(server string, objectId ObjectId, params *GetObjectsObjectIdFilesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "object_id", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/objects/%s/files", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetObjectsObjectIdPrintsRequest generates requests for GetObjectsObjectIdPrints
func NewGetObjectsObjectIdPrintsRequest(server string, objectId ObjectId, params *GetObjectsObjectIdPrintsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "object_id", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/objects/%s/prints", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetObjectsObjectIdUploadStatusRequest generates requests for GetObjectsObjectIdUploadStatus
func NewGetObjectsObjectIdUploadStatusRequest(server string, objectId ObjectId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "object_id", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/objects/%s/upload_status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSearchRequest generates requests for GetSearch
func NewGetSearchRequest(server string, params *GetSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Order != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cat != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cat", runtime.ParamLocationQuery, *params.Cat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Support != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "support", runtime.ParamLocationQuery, *params.Support); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tech != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tech", runtime.ParamLocationQuery, *params.Tech); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Complexity != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "complexity", runtime.ParamLocationQuery, *params.Complexity); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Featured != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "featured", runtime.ParamLocationQuery, *params.Featured); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Remix != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remix", runtime.ParamLocationQuery, *params.Remix); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CommercialUse != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "commercial_use", runtime.ParamLocationQuery, *params.CommercialUse); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Exclusive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclusive", runtime.ParamLocationQuery, *params.Exclusive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersUsernameRequest generates requests for GetUsersUsername
func NewGetUsersUsernameRequest(server string, username Username) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersUsernameCollectionsRequest generates requests for GetUsersUsernameCollections
func NewGetUsersUsernameCollectionsRequest(server string, username Username, params *GetUsersUsernameCollectionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/collections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersUsernameCollectionsCollectionSlugRequest generates requests for GetUsersUsernameCollectionsCollectionSlug
func NewGetUsersUsernameCollectionsCollectionSlugRequest(server string, username Username, collectionSlug CollectionSlug, params *GetUsersUsernameCollectionsCollectionSlugParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "collection_slug", runtime.ParamLocationPath, collectionSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/collections/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersUsernameFollowersRequest generates requests for GetUsersUsernameFollowers
func NewGetUsersUsernameFollowersRequest(server string, username Username, params *GetUsersUsernameFollowersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/followers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersUsernameFollowingRequest generates requests for GetUsersUsernameFollowing
func NewGetUsersUsernameFollowingRequest(server string, username Username, params *GetUsersUsernameFollowingParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/following", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersUsernameObjectsRequest generates requests for GetUsersUsernameObjects
func NewGetUsersUsernameObjectsRequest(server string, username Username, params *GetUsersUsernameObjectsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/objects", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersUsernameObjectsLikedRequest generates requests for GetUsersUsernameObjectsLiked
func NewGetUsersUsernameObjectsLikedRequest(server string, username Username, params *GetUsersUsernameObjectsLikedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/objects_liked", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCategories request
	GetCategoriesWithResponse(ctx context.Context, params *GetCategoriesParams, reqEditors ...RequestEditorFn) (*GetCategoriesResponse, error)

	// GetCategoriesCategoryId request
	GetCategoriesCategoryIdWithResponse(ctx context.Context, categoryId CategoryId, reqEditors ...RequestEditorFn) (*GetCategoriesCategoryIdResponse, error)

	// GetCollections request
	GetCollectionsWithResponse(ctx context.Context, params *GetCollectionsParams, reqEditors ...RequestEditorFn) (*GetCollectionsResponse, error)

	// GetCollectionsCollectionId request
	GetCollectionsCollectionIdWithResponse(ctx context.Context, collectionId CollectionId, params *GetCollectionsCollectionIdParams, reqEditors ...RequestEditorFn) (*GetCollectionsCollectionIdResponse, error)

	// PostFile request
	PostFileWithResponse(ctx context.Context, params *PostFileParams, reqEditors ...RequestEditorFn) (*PostFileResponse, error)

	// GetFilesFileId request
	GetFilesFileIdWithResponse(ctx context.Context, fileId FileId, reqEditors ...RequestEditorFn) (*GetFilesFileIdResponse, error)

	// PostImage request
	PostImageWithResponse(ctx context.Context, params *PostImageParams, reqEditors ...RequestEditorFn) (*PostImageResponse, error)

	// PatchObject request with any body
	PatchObjectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchObjectResponse, error)

	PatchObjectWithResponse(ctx context.Context, body PatchObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchObjectResponse, error)

	// PostObject request with any body
	PostObjectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObjectResponse, error)

	PostObjectWithResponse(ctx context.Context, body PostObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObjectResponse, error)

	// GetObjectsObjectId request
	GetObjectsObjectIdWithResponse(ctx context.Context, objectId ObjectId, params *GetObjectsObjectIdParams, reqEditors ...RequestEditorFn) (*GetObjectsObjectIdResponse, error)

	// GetObjectsObjectIdFiles request
	GetObjectsObjectIdFilesWithResponse(ctx context.Context, objectId ObjectId, params *GetObjectsObjectIdFilesParams, reqEditors ...RequestEditorFn) (*GetObjectsObjectIdFilesResponse, error)

	// GetObjectsObjectIdPrints request
	GetObjectsObjectIdPrintsWithResponse(ctx context.Context, objectId ObjectId, params *GetObjectsObjectIdPrintsParams, reqEditors ...RequestEditorFn) (*GetObjectsObjectIdPrintsResponse, error)

	// GetObjectsObjectIdUploadStatus request
	GetObjectsObjectIdUploadStatusWithResponse(ctx context.Context, objectId ObjectId, reqEditors ...RequestEditorFn) (*GetObjectsObjectIdUploadStatusResponse, error)

	// GetSearch request
	GetSearchWithResponse(ctx context.Context, params *GetSearchParams, reqEditors ...RequestEditorFn) (*GetSearchResponse, error)

	// GetUser request
	GetUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// GetUsersUsername request
	GetUsersUsernameWithResponse(ctx context.Context, username Username, reqEditors ...RequestEditorFn) (*GetUsersUsernameResponse, error)

	// GetUsersUsernameCollections request
	GetUsersUsernameCollectionsWithResponse(ctx context.Context, username Username, params *GetUsersUsernameCollectionsParams, reqEditors ...RequestEditorFn) (*GetUsersUsernameCollectionsResponse, error)

	// GetUsersUsernameCollectionsCollectionSlug request
	GetUsersUsernameCollectionsCollectionSlugWithResponse(ctx context.Context, username Username, collectionSlug CollectionSlug, params *GetUsersUsernameCollectionsCollectionSlugParams, reqEditors ...RequestEditorFn) (*GetUsersUsernameCollectionsCollectionSlugResponse, error)

	// GetUsersUsernameFollowers request
	GetUsersUsernameFollowersWithResponse(ctx context.Context, username Username, params *GetUsersUsernameFollowersParams, reqEditors ...RequestEditorFn) (*GetUsersUsernameFollowersResponse, error)

	// GetUsersUsernameFollowing request
	GetUsersUsernameFollowingWithResponse(ctx context.Context, username Username, params *GetUsersUsernameFollowingParams, reqEditors ...RequestEditorFn) (*GetUsersUsernameFollowingResponse, error)

	// GetUsersUsernameObjects request
	GetUsersUsernameObjectsWithResponse(ctx context.Context, username Username, params *GetUsersUsernameObjectsParams, reqEditors ...RequestEditorFn) (*GetUsersUsernameObjectsResponse, error)

	// GetUsersUsernameObjectsLiked request
	GetUsersUsernameObjectsLikedWithResponse(ctx context.Context, username Username, params *GetUsersUsernameObjectsLikedParams, reqEditors ...RequestEditorFn) (*GetUsersUsernameObjectsLikedResponse, error)
}

type GetCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items      *[]Category `json:"items,omitempty"`
		TotalCount *int        `json:"total_count,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCategoriesCategoryIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Category
}

// Status returns HTTPResponse.Status
func (r GetCategoriesCategoryIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCategoriesCategoryIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCollectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items      *[]OneCollection `json:"items,omitempty"`
		TotalCount *int             `json:"total_count,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetCollectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCollectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCollectionsCollectionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Collection
}

// Status returns HTTPResponse.Status
func (r GetCollectionsCollectionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCollectionsCollectionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Filename *string `json:"filename,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFilesFileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *File
}

// Status returns HTTPResponse.Status
func (r GetFilesFileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFilesFileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Filename *string `json:"filename,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchObjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectUpload
}

// Status returns HTTPResponse.Status
func (r PatchObjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchObjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostObjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectUpload
}

// Status returns HTTPResponse.Status
func (r PostObjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostObjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectsObjectIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Object
}

// Status returns HTTPResponse.Status
func (r GetObjectsObjectIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectsObjectIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectsObjectIdFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items      *[]File `json:"items,omitempty"`
		TotalCount *int    `json:"total_count,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetObjectsObjectIdFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectsObjectIdFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectsObjectIdPrintsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items      *[]Print `json:"items,omitempty"`
		TotalCount *int     `json:"total_count,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetObjectsObjectIdPrintsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectsObjectIdPrintsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectsObjectIdUploadStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectUploadStatus
}

// Status returns HTTPResponse.Status
func (r GetObjectsObjectIdUploadStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectsObjectIdUploadStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items      *[]Object `json:"items,omitempty"`
		TotalCount *int      `json:"total_count,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetUsersUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersUsernameCollectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items      *[]OneCollection `json:"items,omitempty"`
		TotalCount *int             `json:"total_count,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUsersUsernameCollectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersUsernameCollectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersUsernameCollectionsCollectionSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Collection
}

// Status returns HTTPResponse.Status
func (r GetUsersUsernameCollectionsCollectionSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersUsernameCollectionsCollectionSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersUsernameFollowersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items      *[]User `json:"items,omitempty"`
		TotalCount *int    `json:"total_count,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUsersUsernameFollowersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersUsernameFollowersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersUsernameFollowingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items      *[]User `json:"items,omitempty"`
		TotalCount *int    `json:"total_count,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUsersUsernameFollowingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersUsernameFollowingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersUsernameObjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Objects
}

// Status returns HTTPResponse.Status
func (r GetUsersUsernameObjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersUsernameObjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersUsernameObjectsLikedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items      *[]Object `json:"items,omitempty"`
		TotalCount *int      `json:"total_count,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUsersUsernameObjectsLikedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersUsernameObjectsLikedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCategoriesWithResponse request returning *GetCategoriesResponse
func (c *ClientWithResponses) GetCategoriesWithResponse(ctx context.Context, params *GetCategoriesParams, reqEditors ...RequestEditorFn) (*GetCategoriesResponse, error) {
	rsp, err := c.GetCategories(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCategoriesResponse(rsp)
}

// GetCategoriesCategoryIdWithResponse request returning *GetCategoriesCategoryIdResponse
func (c *ClientWithResponses) GetCategoriesCategoryIdWithResponse(ctx context.Context, categoryId CategoryId, reqEditors ...RequestEditorFn) (*GetCategoriesCategoryIdResponse, error) {
	rsp, err := c.GetCategoriesCategoryId(ctx, categoryId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCategoriesCategoryIdResponse(rsp)
}

// GetCollectionsWithResponse request returning *GetCollectionsResponse
func (c *ClientWithResponses) GetCollectionsWithResponse(ctx context.Context, params *GetCollectionsParams, reqEditors ...RequestEditorFn) (*GetCollectionsResponse, error) {
	rsp, err := c.GetCollections(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCollectionsResponse(rsp)
}

// GetCollectionsCollectionIdWithResponse request returning *GetCollectionsCollectionIdResponse
func (c *ClientWithResponses) GetCollectionsCollectionIdWithResponse(ctx context.Context, collectionId CollectionId, params *GetCollectionsCollectionIdParams, reqEditors ...RequestEditorFn) (*GetCollectionsCollectionIdResponse, error) {
	rsp, err := c.GetCollectionsCollectionId(ctx, collectionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCollectionsCollectionIdResponse(rsp)
}

// PostFileWithResponse request returning *PostFileResponse
func (c *ClientWithResponses) PostFileWithResponse(ctx context.Context, params *PostFileParams, reqEditors ...RequestEditorFn) (*PostFileResponse, error) {
	rsp, err := c.PostFile(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFileResponse(rsp)
}

// GetFilesFileIdWithResponse request returning *GetFilesFileIdResponse
func (c *ClientWithResponses) GetFilesFileIdWithResponse(ctx context.Context, fileId FileId, reqEditors ...RequestEditorFn) (*GetFilesFileIdResponse, error) {
	rsp, err := c.GetFilesFileId(ctx, fileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFilesFileIdResponse(rsp)
}

// PostImageWithResponse request returning *PostImageResponse
func (c *ClientWithResponses) PostImageWithResponse(ctx context.Context, params *PostImageParams, reqEditors ...RequestEditorFn) (*PostImageResponse, error) {
	rsp, err := c.PostImage(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostImageResponse(rsp)
}

// PatchObjectWithBodyWithResponse request with arbitrary body returning *PatchObjectResponse
func (c *ClientWithResponses) PatchObjectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchObjectResponse, error) {
	rsp, err := c.PatchObjectWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchObjectResponse(rsp)
}

func (c *ClientWithResponses) PatchObjectWithResponse(ctx context.Context, body PatchObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchObjectResponse, error) {
	rsp, err := c.PatchObject(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchObjectResponse(rsp)
}

// PostObjectWithBodyWithResponse request with arbitrary body returning *PostObjectResponse
func (c *ClientWithResponses) PostObjectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObjectResponse, error) {
	rsp, err := c.PostObjectWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObjectResponse(rsp)
}

func (c *ClientWithResponses) PostObjectWithResponse(ctx context.Context, body PostObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObjectResponse, error) {
	rsp, err := c.PostObject(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObjectResponse(rsp)
}

// GetObjectsObjectIdWithResponse request returning *GetObjectsObjectIdResponse
func (c *ClientWithResponses) GetObjectsObjectIdWithResponse(ctx context.Context, objectId ObjectId, params *GetObjectsObjectIdParams, reqEditors ...RequestEditorFn) (*GetObjectsObjectIdResponse, error) {
	rsp, err := c.GetObjectsObjectId(ctx, objectId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectsObjectIdResponse(rsp)
}

// GetObjectsObjectIdFilesWithResponse request returning *GetObjectsObjectIdFilesResponse
func (c *ClientWithResponses) GetObjectsObjectIdFilesWithResponse(ctx context.Context, objectId ObjectId, params *GetObjectsObjectIdFilesParams, reqEditors ...RequestEditorFn) (*GetObjectsObjectIdFilesResponse, error) {
	rsp, err := c.GetObjectsObjectIdFiles(ctx, objectId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectsObjectIdFilesResponse(rsp)
}

// GetObjectsObjectIdPrintsWithResponse request returning *GetObjectsObjectIdPrintsResponse
func (c *ClientWithResponses) GetObjectsObjectIdPrintsWithResponse(ctx context.Context, objectId ObjectId, params *GetObjectsObjectIdPrintsParams, reqEditors ...RequestEditorFn) (*GetObjectsObjectIdPrintsResponse, error) {
	rsp, err := c.GetObjectsObjectIdPrints(ctx, objectId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectsObjectIdPrintsResponse(rsp)
}

// GetObjectsObjectIdUploadStatusWithResponse request returning *GetObjectsObjectIdUploadStatusResponse
func (c *ClientWithResponses) GetObjectsObjectIdUploadStatusWithResponse(ctx context.Context, objectId ObjectId, reqEditors ...RequestEditorFn) (*GetObjectsObjectIdUploadStatusResponse, error) {
	rsp, err := c.GetObjectsObjectIdUploadStatus(ctx, objectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectsObjectIdUploadStatusResponse(rsp)
}

// GetSearchWithResponse request returning *GetSearchResponse
func (c *ClientWithResponses) GetSearchWithResponse(ctx context.Context, params *GetSearchParams, reqEditors ...RequestEditorFn) (*GetSearchResponse, error) {
	rsp, err := c.GetSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSearchResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// GetUsersUsernameWithResponse request returning *GetUsersUsernameResponse
func (c *ClientWithResponses) GetUsersUsernameWithResponse(ctx context.Context, username Username, reqEditors ...RequestEditorFn) (*GetUsersUsernameResponse, error) {
	rsp, err := c.GetUsersUsername(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersUsernameResponse(rsp)
}

// GetUsersUsernameCollectionsWithResponse request returning *GetUsersUsernameCollectionsResponse
func (c *ClientWithResponses) GetUsersUsernameCollectionsWithResponse(ctx context.Context, username Username, params *GetUsersUsernameCollectionsParams, reqEditors ...RequestEditorFn) (*GetUsersUsernameCollectionsResponse, error) {
	rsp, err := c.GetUsersUsernameCollections(ctx, username, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersUsernameCollectionsResponse(rsp)
}

// GetUsersUsernameCollectionsCollectionSlugWithResponse request returning *GetUsersUsernameCollectionsCollectionSlugResponse
func (c *ClientWithResponses) GetUsersUsernameCollectionsCollectionSlugWithResponse(ctx context.Context, username Username, collectionSlug CollectionSlug, params *GetUsersUsernameCollectionsCollectionSlugParams, reqEditors ...RequestEditorFn) (*GetUsersUsernameCollectionsCollectionSlugResponse, error) {
	rsp, err := c.GetUsersUsernameCollectionsCollectionSlug(ctx, username, collectionSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersUsernameCollectionsCollectionSlugResponse(rsp)
}

// GetUsersUsernameFollowersWithResponse request returning *GetUsersUsernameFollowersResponse
func (c *ClientWithResponses) GetUsersUsernameFollowersWithResponse(ctx context.Context, username Username, params *GetUsersUsernameFollowersParams, reqEditors ...RequestEditorFn) (*GetUsersUsernameFollowersResponse, error) {
	rsp, err := c.GetUsersUsernameFollowers(ctx, username, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersUsernameFollowersResponse(rsp)
}

// GetUsersUsernameFollowingWithResponse request returning *GetUsersUsernameFollowingResponse
func (c *ClientWithResponses) GetUsersUsernameFollowingWithResponse(ctx context.Context, username Username, params *GetUsersUsernameFollowingParams, reqEditors ...RequestEditorFn) (*GetUsersUsernameFollowingResponse, error) {
	rsp, err := c.GetUsersUsernameFollowing(ctx, username, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersUsernameFollowingResponse(rsp)
}

// GetUsersUsernameObjectsWithResponse request returning *GetUsersUsernameObjectsResponse
func (c *ClientWithResponses) GetUsersUsernameObjectsWithResponse(ctx context.Context, username Username, params *GetUsersUsernameObjectsParams, reqEditors ...RequestEditorFn) (*GetUsersUsernameObjectsResponse, error) {
	rsp, err := c.GetUsersUsernameObjects(ctx, username, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersUsernameObjectsResponse(rsp)
}

// GetUsersUsernameObjectsLikedWithResponse request returning *GetUsersUsernameObjectsLikedResponse
func (c *ClientWithResponses) GetUsersUsernameObjectsLikedWithResponse(ctx context.Context, username Username, params *GetUsersUsernameObjectsLikedParams, reqEditors ...RequestEditorFn) (*GetUsersUsernameObjectsLikedResponse, error) {
	rsp, err := c.GetUsersUsernameObjectsLiked(ctx, username, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersUsernameObjectsLikedResponse(rsp)
}

// ParseGetCategoriesResponse parses an HTTP response from a GetCategoriesWithResponse call
func ParseGetCategoriesResponse(rsp *http.Response) (*GetCategoriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items      *[]Category `json:"items,omitempty"`
			TotalCount *int        `json:"total_count,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCategoriesCategoryIdResponse parses an HTTP response from a GetCategoriesCategoryIdWithResponse call
func ParseGetCategoriesCategoryIdResponse(rsp *http.Response) (*GetCategoriesCategoryIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCategoriesCategoryIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Category
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCollectionsResponse parses an HTTP response from a GetCollectionsWithResponse call
func ParseGetCollectionsResponse(rsp *http.Response) (*GetCollectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCollectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items      *[]OneCollection `json:"items,omitempty"`
			TotalCount *int             `json:"total_count,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCollectionsCollectionIdResponse parses an HTTP response from a GetCollectionsCollectionIdWithResponse call
func ParseGetCollectionsCollectionIdResponse(rsp *http.Response) (*GetCollectionsCollectionIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCollectionsCollectionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Collection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostFileResponse parses an HTTP response from a PostFileWithResponse call
func ParsePostFileResponse(rsp *http.Response) (*PostFileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Filename *string `json:"filename,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetFilesFileIdResponse parses an HTTP response from a GetFilesFileIdWithResponse call
func ParseGetFilesFileIdResponse(rsp *http.Response) (*GetFilesFileIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFilesFileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest File
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostImageResponse parses an HTTP response from a PostImageWithResponse call
func ParsePostImageResponse(rsp *http.Response) (*PostImageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Filename *string `json:"filename,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePatchObjectResponse parses an HTTP response from a PatchObjectWithResponse call
func ParsePatchObjectResponse(rsp *http.Response) (*PatchObjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchObjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectUpload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostObjectResponse parses an HTTP response from a PostObjectWithResponse call
func ParsePostObjectResponse(rsp *http.Response) (*PostObjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostObjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectUpload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetObjectsObjectIdResponse parses an HTTP response from a GetObjectsObjectIdWithResponse call
func ParseGetObjectsObjectIdResponse(rsp *http.Response) (*GetObjectsObjectIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectsObjectIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Object
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetObjectsObjectIdFilesResponse parses an HTTP response from a GetObjectsObjectIdFilesWithResponse call
func ParseGetObjectsObjectIdFilesResponse(rsp *http.Response) (*GetObjectsObjectIdFilesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectsObjectIdFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items      *[]File `json:"items,omitempty"`
			TotalCount *int    `json:"total_count,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetObjectsObjectIdPrintsResponse parses an HTTP response from a GetObjectsObjectIdPrintsWithResponse call
func ParseGetObjectsObjectIdPrintsResponse(rsp *http.Response) (*GetObjectsObjectIdPrintsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectsObjectIdPrintsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items      *[]Print `json:"items,omitempty"`
			TotalCount *int     `json:"total_count,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetObjectsObjectIdUploadStatusResponse parses an HTTP response from a GetObjectsObjectIdUploadStatusWithResponse call
func ParseGetObjectsObjectIdUploadStatusResponse(rsp *http.Response) (*GetObjectsObjectIdUploadStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectsObjectIdUploadStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectUploadStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSearchResponse parses an HTTP response from a GetSearchWithResponse call
func ParseGetSearchResponse(rsp *http.Response) (*GetSearchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items      *[]Object `json:"items,omitempty"`
			TotalCount *int      `json:"total_count,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersUsernameResponse parses an HTTP response from a GetUsersUsernameWithResponse call
func ParseGetUsersUsernameResponse(rsp *http.Response) (*GetUsersUsernameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersUsernameCollectionsResponse parses an HTTP response from a GetUsersUsernameCollectionsWithResponse call
func ParseGetUsersUsernameCollectionsResponse(rsp *http.Response) (*GetUsersUsernameCollectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersUsernameCollectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items      *[]OneCollection `json:"items,omitempty"`
			TotalCount *int             `json:"total_count,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersUsernameCollectionsCollectionSlugResponse parses an HTTP response from a GetUsersUsernameCollectionsCollectionSlugWithResponse call
func ParseGetUsersUsernameCollectionsCollectionSlugResponse(rsp *http.Response) (*GetUsersUsernameCollectionsCollectionSlugResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersUsernameCollectionsCollectionSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Collection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersUsernameFollowersResponse parses an HTTP response from a GetUsersUsernameFollowersWithResponse call
func ParseGetUsersUsernameFollowersResponse(rsp *http.Response) (*GetUsersUsernameFollowersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersUsernameFollowersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items      *[]User `json:"items,omitempty"`
			TotalCount *int    `json:"total_count,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersUsernameFollowingResponse parses an HTTP response from a GetUsersUsernameFollowingWithResponse call
func ParseGetUsersUsernameFollowingResponse(rsp *http.Response) (*GetUsersUsernameFollowingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersUsernameFollowingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items      *[]User `json:"items,omitempty"`
			TotalCount *int    `json:"total_count,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersUsernameObjectsResponse parses an HTTP response from a GetUsersUsernameObjectsWithResponse call
func ParseGetUsersUsernameObjectsResponse(rsp *http.Response) (*GetUsersUsernameObjectsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersUsernameObjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Objects
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersUsernameObjectsLikedResponse parses an HTTP response from a GetUsersUsernameObjectsLikedWithResponse call
func ParseGetUsersUsernameObjectsLikedResponse(rsp *http.Response) (*GetUsersUsernameObjectsLikedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersUsernameObjectsLikedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items      *[]Object `json:"items,omitempty"`
			TotalCount *int      `json:"total_count,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
