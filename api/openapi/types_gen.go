// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package openapi

const (
	KeyScopes                      = "key.Scopes"
	Oauth_authorization_codeScopes = "oauth_authorization_code.Scopes"
	Oauth_implicitScopes           = "oauth_implicit.Scopes"
)

// Category defines model for Category.
type Category struct {
	Children *struct {
		Items *[]struct {
			Id   *int    `json:"id,omitempty"`
			Name *string `json:"name,omitempty"`
			Slug *string `json:"slug,omitempty"`
		} `json:"items,omitempty"`
		TotalCount *int `json:"total_count,omitempty"`
	} `json:"children,omitempty"`
	Id      *int     `json:"id,omitempty"`
	Name    *string  `json:"name,omitempty"`
	Objects *Objects `json:"objects,omitempty"`
	Parent  *struct {
		Id   *int    `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
		Slug *string `json:"slug,omitempty"`
	} `json:"parent,omitempty"`
	Slug *string `json:"slug,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// Collection defines model for Collection.
type Collection struct {
	CoverObject *Object `json:"cover_object,omitempty"`

	// The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
	CreatedAt   *string  `json:"created_at,omitempty"`
	Description *string  `json:"description,omitempty"`
	Featured    *bool    `json:"featured,omitempty"`
	Id          *int     `json:"id,omitempty"`
	Name        *string  `json:"name,omitempty"`
	Objects     *Objects `json:"objects,omitempty"`
	Owner       *User    `json:"owner,omitempty"`
	Public      *bool    `json:"public,omitempty"`
	Slug        *string  `json:"slug,omitempty"`
	Url         *string  `json:"url,omitempty"`
}

// File defines model for File.
type File struct {
	Description *string `json:"description,omitempty"`

	// Available ONLY with Oauth connected User. Not with API key.
	DownloadUrl  *string `json:"download_url,omitempty"`
	Filename     *string `json:"filename,omitempty"`
	Id           *int    `json:"id,omitempty"`
	Size         *string `json:"size,omitempty"`
	ThumbnailUrl *string `json:"thumbnail_url,omitempty"`
}

// FileUploadId defines model for FileUploadId.
type FileUploadId struct {
	Filename *string `json:"filename,omitempty"`
	UploadId *string `json:"upload_id,omitempty"`
}

// FileUploadRequest defines model for FileUploadRequest.
type FileUploadRequest struct {
	Filename *string `json:"filename,omitempty"`
	Size     *int    `json:"size,omitempty"`
}

// FileUploadStatus defines model for FileUploadStatus.
type FileUploadStatus struct {
	Filename *string `json:"filename,omitempty"`
	Status   *string `json:"status,omitempty"`
	UploadId *string `json:"upload_id,omitempty"`
}

// Image defines model for Image.
type Image struct {
	Id        *int  `json:"id,omitempty"`
	IsPrimary *bool `json:"is_primary,omitempty"`
	Original  *struct {
		Height *string `json:"height,omitempty"`
		Url    *string `json:"url,omitempty"`
		Width  *string `json:"width,omitempty"`
	} `json:"original,omitempty"`
	Standard *struct {
		Height *string `json:"height,omitempty"`
		Url    *string `json:"url,omitempty"`
		Width  *string `json:"width,omitempty"`
	} `json:"standard,omitempty"`
	Thumbnail *struct {
		Height *string `json:"height,omitempty"`
		Url    *string `json:"url,omitempty"`
		Width  *string `json:"width,omitempty"`
	} `json:"thumbnail,omitempty"`
}

// ImageUploadId defines model for ImageUploadId.
type ImageUploadId struct {
	Filename *string `json:"filename,omitempty"`
	UploadId *string `json:"upload_id,omitempty"`
}

// ImageUploadRequest defines model for ImageUploadRequest.
type ImageUploadRequest struct {
	Filename *string `json:"filename,omitempty"`
	Size     *int    `json:"size,omitempty"`
}

// ImageUploadStatus defines model for ImageUploadStatus.
type ImageUploadStatus struct {
	Filename *string `json:"filename,omitempty"`
	Status   *string `json:"status,omitempty"`
	UploadId *string `json:"upload_id,omitempty"`
}

// License defines model for License.
type License struct {
	// Possible values are: 'mention', 'remix', 'commercial-use', 'exclusivity'
	Type  *string `json:"type,omitempty"`
	Value *bool   `json:"value,omitempty"`
}

// Object defines model for Object.
type Object struct {
	// Available ONLY with Oauth connected User. Not with API key.
	ArchiveDownloadUrl *string        `json:"archive_download_url,omitempty"`
	Categories         *[]OneCategory `json:"categories,omitempty"`
	Complexity         *int           `json:"complexity,omitempty"`
	Description        *string        `json:"description,omitempty"`
	Designer           *User          `json:"designer,omitempty"`
	Dimensions         *string        `json:"dimensions,omitempty"`
	Featured           *string        `json:"featured,omitempty"`
	Files              *[]File        `json:"files,omitempty"`
	Id                 *int           `json:"id,omitempty"`
	Images             *[]Image       `json:"images,omitempty"`
	Licenses           *[]License     `json:"licenses,omitempty"`
	Likes              *int           `json:"likes,omitempty"`
	MaterialQuantity   *string        `json:"material_quantity,omitempty"`
	Name               *string        `json:"name,omitempty"`
	ParentId           *int           `json:"parent_id,omitempty"`

	// The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
	PublishedAt *string   `json:"published_at,omitempty"`
	Tags        *[]string `json:"tags,omitempty"`
	Url         *string   `json:"url,omitempty"`
	Views       *int      `json:"views,omitempty"`

	// 0: Private, 2: Public
	Visibility *string `json:"visibility,omitempty"`
}

// ObjectMetadata defines model for ObjectMetadata.
type ObjectMetadata struct {
	ClientUrl        *string               `json:"client_url,omitempty"`
	Description      *string               `json:"description,omitempty"`
	Dimensions       *string               `json:"dimensions,omitempty"`
	FilamentQuantity *string               `json:"filament_quantity,omitempty"`
	Files            *[]FileUploadRequest  `json:"files,omitempty"`
	HowTo            *string               `json:"how_to,omitempty"`
	Images           *[]ImageUploadRequest `json:"images,omitempty"`
	Licenses         *[]License            `json:"licenses,omitempty"`
	Name             *string               `json:"name,omitempty"`
	SupportFree      *bool                 `json:"support_free,omitempty"`
	Tags             *string               `json:"tags,omitempty"`
	TimeToDoFrom     *int                  `json:"time_to_do_from,omitempty"`
	TimeToDoTo       *int                  `json:"time_to_do_to,omitempty"`

	// 2: Public, 0: Private
	Visibility *int `json:"visibility,omitempty"`
}

// ObjectPatchMetadata defines model for ObjectPatchMetadata.
type ObjectPatchMetadata struct {
	// 2: Public, 0: Private
	Visibility *int `json:"visibility,omitempty"`
}

// ObjectUpload defines model for ObjectUpload.
type ObjectUpload struct {
	Files           *[]FileUploadId  `json:"files,omitempty"`
	Id              *int             `json:"id,omitempty"`
	Images          *[]ImageUploadId `json:"images,omitempty"`
	Name            *string          `json:"name,omitempty"`
	ObjectStatusUrl *string          `json:"object_status_url,omitempty"`
	ObjectUrl       *string          `json:"object_url,omitempty"`
}

// ObjectUploadStatus defines model for ObjectUploadStatus.
type ObjectUploadStatus struct {
	Files  *[]FileUploadStatus  `json:"files,omitempty"`
	Id     *int                 `json:"id,omitempty"`
	Images *[]ImageUploadStatus `json:"images,omitempty"`
	Name   *string              `json:"name,omitempty"`
}

// Objects defines model for Objects.
type Objects struct {
	Items      *[]Object `json:"items,omitempty"`
	TotalCount *int      `json:"total_count,omitempty"`
}

// OneCategory defines model for OneCategory.
type OneCategory struct {
	Children *struct {
		Items *[]struct {
			Id   *int    `json:"id,omitempty"`
			Name *string `json:"name,omitempty"`
			Slug *string `json:"slug,omitempty"`
		} `json:"items,omitempty"`
		TotalCount *int `json:"total_count,omitempty"`
	} `json:"children,omitempty"`
	Id     *int    `json:"id,omitempty"`
	Name   *string `json:"name,omitempty"`
	Parent *struct {
		Id   *int    `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
		Slug *string `json:"slug,omitempty"`
	} `json:"parent,omitempty"`
	Slug *string `json:"slug,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// OneCollection defines model for OneCollection.
type OneCollection struct {
	CoverObject *Object `json:"cover_object,omitempty"`

	// The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
	CreatedAt   *string `json:"created_at,omitempty"`
	Description *string `json:"description,omitempty"`
	Featured    *bool   `json:"featured,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
	Owner       *User   `json:"owner,omitempty"`
	Public      *bool   `json:"public,omitempty"`
	Slug        *string `json:"slug,omitempty"`
	Url         *string `json:"url,omitempty"`
}

// Print defines model for Print.
type Print struct {
	Id       *int `json:"id,omitempty"`
	Original *struct {
		Height *string `json:"height,omitempty"`
		Url    *string `json:"url,omitempty"`
		Width  *string `json:"width,omitempty"`
	} `json:"original,omitempty"`
	Standard *struct {
		Height *string `json:"height,omitempty"`
		Url    *string `json:"url,omitempty"`
		Width  *string `json:"width,omitempty"`
	} `json:"standard,omitempty"`
	Thumbnail *struct {
		Height *string `json:"height,omitempty"`
		Url    *string `json:"url,omitempty"`
		Width  *string `json:"width,omitempty"`
	} `json:"thumbnail,omitempty"`
}

// User defines model for User.
type User struct {
	AvatarThumbnailUrl *string `json:"avatar_thumbnail_url,omitempty"`
	AvatarUrl          *string `json:"avatar_url,omitempty"`
	Bio                *string `json:"bio,omitempty"`
	Name               *string `json:"name,omitempty"`
	ProfileUrl         *string `json:"profile_url,omitempty"`
	Username           *string `json:"username,omitempty"`
	Website            *string `json:"website,omitempty"`
}

// Cat defines model for cat.
type Cat string

// CategoryId defines model for category_id.
type CategoryId string

// CollectionId defines model for collection_id.
type CollectionId string

// CollectionSlug defines model for collection_slug.
type CollectionSlug string

// CommercialUse defines model for commercial_use.
type CommercialUse string

// Complexity defines model for complexity.
type Complexity string

// Exclusive defines model for exclusive.
type Exclusive string

// Featured defines model for featured.
type Featured string

// FileId defines model for file_id.
type FileId string

// ObjectId defines model for object_id.
type ObjectId float32

// Order defines model for order.
type Order string

// Page defines model for page.
type Page string

// PerPage defines model for per_page.
type PerPage string

// Q defines model for q.
type Q string

// Remix defines model for remix.
type Remix string

// Sort defines model for sort.
type Sort string

// Support defines model for support.
type Support string

// Tech defines model for tech.
type Tech string

// TopCategory defines model for top_category.
type TopCategory bool

// UploadId defines model for upload_id.
type UploadId string

// Username defines model for username.
type Username string

// GetCategoriesParams defines parameters for GetCategories.
type GetCategoriesParams struct {
	// Filter top categories
	Top *TopCategory `json:"top,omitempty"`

	// Page number. Default is 1
	Page *Page `json:"page,omitempty"`

	// Number of results per page. Default is 20
	PerPage *PerPage `json:"per_page,omitempty"`
}

// GetCollectionsParams defines parameters for GetCollections.
type GetCollectionsParams struct {
	// Page number. Default is 1
	Page *Page `json:"page,omitempty"`

	// Number of results per page. Default is 20
	PerPage *PerPage `json:"per_page,omitempty"`
}

// GetCollectionsCollectionIdParams defines parameters for GetCollectionsCollectionId.
type GetCollectionsCollectionIdParams struct {
	// Page number. Default is 1
	Page *Page `json:"page,omitempty"`

	// Number of results per page. Default is 20
	PerPage *PerPage `json:"per_page,omitempty"`
}

// PostFileParams defines parameters for PostFile.
type PostFileParams struct {
	// Temporary identifier to upload a file
	UploadId UploadId `json:"upload_id"`
}

// PostImageParams defines parameters for PostImage.
type PostImageParams struct {
	// Temporary identifier to upload a file
	UploadId UploadId `json:"upload_id"`
}

// PatchObjectJSONBody defines parameters for PatchObject.
type PatchObjectJSONBody ObjectPatchMetadata

// PostObjectJSONBody defines parameters for PostObject.
type PostObjectJSONBody ObjectMetadata

// GetObjectsObjectIdParams defines parameters for GetObjectsObjectId.
type GetObjectsObjectIdParams struct {
	// Page number. Default is 1
	Page *Page `json:"page,omitempty"`

	// Number of results per page. Default is 20
	PerPage *PerPage `json:"per_page,omitempty"`
}

// GetObjectsObjectIdFilesParams defines parameters for GetObjectsObjectIdFiles.
type GetObjectsObjectIdFilesParams struct {
	// Page number. Default is 1
	Page *Page `json:"page,omitempty"`

	// Number of results per page. Default is 20
	PerPage *PerPage `json:"per_page,omitempty"`
}

// GetObjectsObjectIdPrintsParams defines parameters for GetObjectsObjectIdPrints.
type GetObjectsObjectIdPrintsParams struct {
	// Page number. Default is 1
	Page *Page `json:"page,omitempty"`

	// Number of results per page. Default is 20
	PerPage *PerPage `json:"per_page,omitempty"`
}

// GetSearchParams defines parameters for GetSearch.
type GetSearchParams struct {
	// Search query. See the details query syntax document
	Q Q `json:"q"`

	// Page number. Default is 1
	Page *Page `json:"page,omitempty"`

	// Number of results per page. Default is 20
	PerPage *PerPage `json:"per_page,omitempty"`

	// Sort results by: 'visits', 'date', 'popularity'.
	Sort *Sort `json:"sort,omitempty"`

	// Sorting order: 'desc', 'asc' (Defaults to desc).
	Order *Order `json:"order,omitempty"`

	// Filter object of a certain category, by the category id. eg. cat={category_id}
	Cat *Cat `json:"cat,omitempty"`

	// Filter printing support-free objects: 1: support-free
	Support *Support `json:"support,omitempty"`

	// Filter printing technology recommanded for the object: eg. 'DLP/SLA'
	Tech *Tech `json:"tech,omitempty"`

	// Filter object difficulty (How hard to build) : 'eas', 'med', 'diff'
	Complexity *Complexity `json:"complexity,omitempty"`

	// Filter featured object: 0: Non-featured, 1: featured
	Featured *Featured `json:"featured,omitempty"`

	// License filter: the designer accepted his object the remixed.
	Remix *Remix `json:"remix,omitempty"`

	// License filter: the designer accepted commercial use of his object.
	CommercialUse *CommercialUse `json:"commercial_use,omitempty"`

	// License filter: this object should be shared exclusivly on MyMiniFactory.
	Exclusive *Exclusive `json:"exclusive,omitempty"`
}

// GetUsersUsernameCollectionsParams defines parameters for GetUsersUsernameCollections.
type GetUsersUsernameCollectionsParams struct {
	// Page number. Default is 1
	Page *Page `json:"page,omitempty"`

	// Number of results per page. Default is 20
	PerPage *PerPage `json:"per_page,omitempty"`
}

// GetUsersUsernameCollectionsCollectionSlugParams defines parameters for GetUsersUsernameCollectionsCollectionSlug.
type GetUsersUsernameCollectionsCollectionSlugParams struct {
	// Page number. Default is 1
	Page *Page `json:"page,omitempty"`

	// Number of results per page. Default is 20
	PerPage *PerPage `json:"per_page,omitempty"`
}

// GetUsersUsernameFollowersParams defines parameters for GetUsersUsernameFollowers.
type GetUsersUsernameFollowersParams struct {
	// Page number. Default is 1
	Page *Page `json:"page,omitempty"`

	// Number of results per page. Default is 20
	PerPage *PerPage `json:"per_page,omitempty"`
}

// GetUsersUsernameFollowingParams defines parameters for GetUsersUsernameFollowing.
type GetUsersUsernameFollowingParams struct {
	// Page number. Default is 1
	Page *Page `json:"page,omitempty"`

	// Number of results per page. Default is 20
	PerPage *PerPage `json:"per_page,omitempty"`
}

// GetUsersUsernameObjectsParams defines parameters for GetUsersUsernameObjects.
type GetUsersUsernameObjectsParams struct {
	// Page number. Default is 1
	Page *Page `json:"page,omitempty"`

	// Number of results per page. Default is 20
	PerPage *PerPage `json:"per_page,omitempty"`
}

// GetUsersUsernameObjectsLikedParams defines parameters for GetUsersUsernameObjectsLiked.
type GetUsersUsernameObjectsLikedParams struct {
	// Page number. Default is 1
	Page *Page `json:"page,omitempty"`

	// Number of results per page. Default is 20
	PerPage *PerPage `json:"per_page,omitempty"`
}

// PatchObjectJSONRequestBody defines body for PatchObject for application/json ContentType.
type PatchObjectJSONRequestBody = PatchObjectJSONBody

// PostObjectJSONRequestBody defines body for PostObject for application/json ContentType.
type PostObjectJSONRequestBody = PostObjectJSONBody
