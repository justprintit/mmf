// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Print print
//
// swagger:model Print
type Print struct {

	// id
	ID int64 `json:"id,omitempty"`

	// original
	Original *PrintOriginal `json:"original,omitempty"`

	// standard
	Standard *PrintStandard `json:"standard,omitempty"`

	// thumbnail
	Thumbnail *PrintThumbnail `json:"thumbnail,omitempty"`
}

// Validate validates this print
func (m *Print) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOriginal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThumbnail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Print) validateOriginal(formats strfmt.Registry) error {
	if swag.IsZero(m.Original) { // not required
		return nil
	}

	if m.Original != nil {
		if err := m.Original.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("original")
			}
			return err
		}
	}

	return nil
}

func (m *Print) validateStandard(formats strfmt.Registry) error {
	if swag.IsZero(m.Standard) { // not required
		return nil
	}

	if m.Standard != nil {
		if err := m.Standard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standard")
			}
			return err
		}
	}

	return nil
}

func (m *Print) validateThumbnail(formats strfmt.Registry) error {
	if swag.IsZero(m.Thumbnail) { // not required
		return nil
	}

	if m.Thumbnail != nil {
		if err := m.Thumbnail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("thumbnail")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this print based on the context it is used
func (m *Print) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOriginal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStandard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThumbnail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Print) contextValidateOriginal(ctx context.Context, formats strfmt.Registry) error {

	if m.Original != nil {
		if err := m.Original.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("original")
			}
			return err
		}
	}

	return nil
}

func (m *Print) contextValidateStandard(ctx context.Context, formats strfmt.Registry) error {

	if m.Standard != nil {
		if err := m.Standard.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standard")
			}
			return err
		}
	}

	return nil
}

func (m *Print) contextValidateThumbnail(ctx context.Context, formats strfmt.Registry) error {

	if m.Thumbnail != nil {
		if err := m.Thumbnail.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("thumbnail")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Print) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Print) UnmarshalBinary(b []byte) error {
	var res Print
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PrintOriginal print original
//
// swagger:model PrintOriginal
type PrintOriginal struct {

	// height
	Height string `json:"height,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// width
	Width string `json:"width,omitempty"`
}

// Validate validates this print original
func (m *PrintOriginal) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this print original based on context it is used
func (m *PrintOriginal) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PrintOriginal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrintOriginal) UnmarshalBinary(b []byte) error {
	var res PrintOriginal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PrintStandard print standard
//
// swagger:model PrintStandard
type PrintStandard struct {

	// height
	Height string `json:"height,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// width
	Width string `json:"width,omitempty"`
}

// Validate validates this print standard
func (m *PrintStandard) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this print standard based on context it is used
func (m *PrintStandard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PrintStandard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrintStandard) UnmarshalBinary(b []byte) error {
	var res PrintStandard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PrintThumbnail print thumbnail
//
// swagger:model PrintThumbnail
type PrintThumbnail struct {

	// height
	Height string `json:"height,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// width
	Width string `json:"width,omitempty"`
}

// Validate validates this print thumbnail
func (m *PrintThumbnail) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this print thumbnail based on context it is used
func (m *PrintThumbnail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PrintThumbnail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrintThumbnail) UnmarshalBinary(b []byte) error {
	var res PrintThumbnail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
