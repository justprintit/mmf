// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/justprintit/mmf/swagger/models"
)

// GetUsersUsernameCollectionsReader is a Reader for the GetUsersUsernameCollections structure.
type GetUsersUsernameCollectionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUsersUsernameCollectionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUsersUsernameCollectionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetUsersUsernameCollectionsOK creates a GetUsersUsernameCollectionsOK with default headers values
func NewGetUsersUsernameCollectionsOK() *GetUsersUsernameCollectionsOK {
	return &GetUsersUsernameCollectionsOK{}
}

/* GetUsersUsernameCollectionsOK describes a response with status code 200, with default header values.

List of collections
*/
type GetUsersUsernameCollectionsOK struct {
	Payload *GetUsersUsernameCollectionsOKBody
}

func (o *GetUsersUsernameCollectionsOK) Error() string {
	return fmt.Sprintf("[GET /users/{username}/collections][%d] getUsersUsernameCollectionsOK  %+v", 200, o.Payload)
}
func (o *GetUsersUsernameCollectionsOK) GetPayload() *GetUsersUsernameCollectionsOKBody {
	return o.Payload
}

func (o *GetUsersUsernameCollectionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetUsersUsernameCollectionsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetUsersUsernameCollectionsOKBody get users username collections o k body
swagger:model GetUsersUsernameCollectionsOKBody
*/
type GetUsersUsernameCollectionsOKBody struct {

	// items
	Items []*models.OneCollection `json:"items"`

	// total count
	TotalCount int64 `json:"total_count,omitempty"`
}

// Validate validates this get users username collections o k body
func (o *GetUsersUsernameCollectionsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUsersUsernameCollectionsOKBody) validateItems(formats strfmt.Registry) error {
	if swag.IsZero(o.Items) { // not required
		return nil
	}

	for i := 0; i < len(o.Items); i++ {
		if swag.IsZero(o.Items[i]) { // not required
			continue
		}

		if o.Items[i] != nil {
			if err := o.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getUsersUsernameCollectionsOK" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get users username collections o k body based on the context it is used
func (o *GetUsersUsernameCollectionsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUsersUsernameCollectionsOKBody) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Items); i++ {

		if o.Items[i] != nil {
			if err := o.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getUsersUsernameCollectionsOK" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetUsersUsernameCollectionsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUsersUsernameCollectionsOKBody) UnmarshalBinary(b []byte) error {
	var res GetUsersUsernameCollectionsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
