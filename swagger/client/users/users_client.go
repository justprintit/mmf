// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetUser(params *GetUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserOK, error)

	GetUsersUsername(params *GetUsersUsernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUsersUsernameOK, error)

	GetUsersUsernameCollections(params *GetUsersUsernameCollectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUsersUsernameCollectionsOK, error)

	GetUsersUsernameCollectionsCollectionSlug(params *GetUsersUsernameCollectionsCollectionSlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUsersUsernameCollectionsCollectionSlugOK, error)

	GetUsersUsernameFollowers(params *GetUsersUsernameFollowersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUsersUsernameFollowersOK, error)

	GetUsersUsernameFollowing(params *GetUsersUsernameFollowingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUsersUsernameFollowingOK, error)

	GetUsersUsernameObjects(params *GetUsersUsernameObjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUsersUsernameObjectsOK, error)

	GetUsersUsernameObjectsLiked(params *GetUsersUsernameObjectsLikedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUsersUsernameObjectsLikedOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetUser Get the current user basic information.
*/
func (a *Client) GetUser(params *GetUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUser",
		Method:             "GET",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsersUsername Get basic information about a user.
*/
func (a *Client) GetUsersUsername(params *GetUsersUsernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUsersUsernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersUsernameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUsersUsername",
		Method:             "GET",
		PathPattern:        "/users/{username}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersUsernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersUsernameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUsersUsername: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsersUsernameCollections Get a user's collections.
*/
func (a *Client) GetUsersUsernameCollections(params *GetUsersUsernameCollectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUsersUsernameCollectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersUsernameCollectionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUsersUsernameCollections",
		Method:             "GET",
		PathPattern:        "/users/{username}/collections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersUsernameCollectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersUsernameCollectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUsersUsernameCollections: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsersUsernameCollectionsCollectionSlug Get a user's collections.
*/
func (a *Client) GetUsersUsernameCollectionsCollectionSlug(params *GetUsersUsernameCollectionsCollectionSlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUsersUsernameCollectionsCollectionSlugOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersUsernameCollectionsCollectionSlugParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUsersUsernameCollectionsCollectionSlug",
		Method:             "GET",
		PathPattern:        "/users/{username}/collections/{collection_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersUsernameCollectionsCollectionSlugReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersUsernameCollectionsCollectionSlugOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUsersUsernameCollectionsCollectionSlug: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsersUsernameFollowers Get a user's followers.
*/
func (a *Client) GetUsersUsernameFollowers(params *GetUsersUsernameFollowersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUsersUsernameFollowersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersUsernameFollowersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUsersUsernameFollowers",
		Method:             "GET",
		PathPattern:        "/users/{username}/followers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersUsernameFollowersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersUsernameFollowersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUsersUsernameFollowers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsersUsernameFollowing Get a user's followings.
*/
func (a *Client) GetUsersUsernameFollowing(params *GetUsersUsernameFollowingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUsersUsernameFollowingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersUsernameFollowingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUsersUsernameFollowing",
		Method:             "GET",
		PathPattern:        "/users/{username}/following",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersUsernameFollowingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersUsernameFollowingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUsersUsernameFollowing: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsersUsernameObjects Get a user's objects.
*/
func (a *Client) GetUsersUsernameObjects(params *GetUsersUsernameObjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUsersUsernameObjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersUsernameObjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUsersUsernameObjects",
		Method:             "GET",
		PathPattern:        "/users/{username}/objects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersUsernameObjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersUsernameObjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUsersUsernameObjects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsersUsernameObjectsLiked Get a user's liked objects.
*/
func (a *Client) GetUsersUsernameObjectsLiked(params *GetUsersUsernameObjectsLikedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUsersUsernameObjectsLikedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersUsernameObjectsLikedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUsersUsernameObjectsLiked",
		Method:             "GET",
		PathPattern:        "/users/{username}/objects_liked",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersUsernameObjectsLikedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersUsernameObjectsLikedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUsersUsernameObjectsLiked: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
