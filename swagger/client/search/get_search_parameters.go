// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetSearchParams creates a new GetSearchParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetSearchParams() *GetSearchParams {
	return &GetSearchParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetSearchParamsWithTimeout creates a new GetSearchParams object
// with the ability to set a timeout on a request.
func NewGetSearchParamsWithTimeout(timeout time.Duration) *GetSearchParams {
	return &GetSearchParams{
		timeout: timeout,
	}
}

// NewGetSearchParamsWithContext creates a new GetSearchParams object
// with the ability to set a context for a request.
func NewGetSearchParamsWithContext(ctx context.Context) *GetSearchParams {
	return &GetSearchParams{
		Context: ctx,
	}
}

// NewGetSearchParamsWithHTTPClient creates a new GetSearchParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetSearchParamsWithHTTPClient(client *http.Client) *GetSearchParams {
	return &GetSearchParams{
		HTTPClient: client,
	}
}

/* GetSearchParams contains all the parameters to send to the API endpoint
   for the get search operation.

   Typically these are written to a http.Request.
*/
type GetSearchParams struct {

	/* Cat.

	   Filter object of a certain category, by the category id. eg. cat={category_id}
	*/
	Cat *string

	/* CommercialUse.

	   License filter: the designer accepted commercial use of his object.
	*/
	CommercialUse *string

	/* Complexity.

	   Filter object difficulty (How hard to build) : 'eas', 'med', 'diff'
	*/
	Complexity *string

	/* Exclusive.

	   License filter: this object should be shared exclusivly on MyMiniFactory.
	*/
	Exclusive *string

	/* Featured.

	   Filter featured object: 0: Non-featured, 1: featured
	*/
	Featured *string

	/* Order.

	   Sorting order: 'desc', 'asc' (Defaults to desc).
	*/
	Order *string

	/* Page.

	   Page number. Default is 1
	*/
	Page *string

	/* PerPage.

	   Number of results per page. Default is 20
	*/
	PerPage *string

	/* Q.

	   Search query. See the details query syntax document
	*/
	Q string

	/* Remix.

	   License filter: the designer accepted his object the remixed.
	*/
	Remix *string

	/* Sort.

	   Sort results by: 'visits', 'date', 'popularity'.
	*/
	Sort *string

	/* Support.

	   Filter printing support-free objects: 1: support-free
	*/
	Support *string

	/* Tech.

	   Filter printing technology recommanded for the object: eg. 'DLP/SLA'
	*/
	Tech *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get search params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSearchParams) WithDefaults() *GetSearchParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get search params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSearchParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get search params
func (o *GetSearchParams) WithTimeout(timeout time.Duration) *GetSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get search params
func (o *GetSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get search params
func (o *GetSearchParams) WithContext(ctx context.Context) *GetSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get search params
func (o *GetSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get search params
func (o *GetSearchParams) WithHTTPClient(client *http.Client) *GetSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get search params
func (o *GetSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCat adds the cat to the get search params
func (o *GetSearchParams) WithCat(cat *string) *GetSearchParams {
	o.SetCat(cat)
	return o
}

// SetCat adds the cat to the get search params
func (o *GetSearchParams) SetCat(cat *string) {
	o.Cat = cat
}

// WithCommercialUse adds the commercialUse to the get search params
func (o *GetSearchParams) WithCommercialUse(commercialUse *string) *GetSearchParams {
	o.SetCommercialUse(commercialUse)
	return o
}

// SetCommercialUse adds the commercialUse to the get search params
func (o *GetSearchParams) SetCommercialUse(commercialUse *string) {
	o.CommercialUse = commercialUse
}

// WithComplexity adds the complexity to the get search params
func (o *GetSearchParams) WithComplexity(complexity *string) *GetSearchParams {
	o.SetComplexity(complexity)
	return o
}

// SetComplexity adds the complexity to the get search params
func (o *GetSearchParams) SetComplexity(complexity *string) {
	o.Complexity = complexity
}

// WithExclusive adds the exclusive to the get search params
func (o *GetSearchParams) WithExclusive(exclusive *string) *GetSearchParams {
	o.SetExclusive(exclusive)
	return o
}

// SetExclusive adds the exclusive to the get search params
func (o *GetSearchParams) SetExclusive(exclusive *string) {
	o.Exclusive = exclusive
}

// WithFeatured adds the featured to the get search params
func (o *GetSearchParams) WithFeatured(featured *string) *GetSearchParams {
	o.SetFeatured(featured)
	return o
}

// SetFeatured adds the featured to the get search params
func (o *GetSearchParams) SetFeatured(featured *string) {
	o.Featured = featured
}

// WithOrder adds the order to the get search params
func (o *GetSearchParams) WithOrder(order *string) *GetSearchParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the get search params
func (o *GetSearchParams) SetOrder(order *string) {
	o.Order = order
}

// WithPage adds the page to the get search params
func (o *GetSearchParams) WithPage(page *string) *GetSearchParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get search params
func (o *GetSearchParams) SetPage(page *string) {
	o.Page = page
}

// WithPerPage adds the perPage to the get search params
func (o *GetSearchParams) WithPerPage(perPage *string) *GetSearchParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the get search params
func (o *GetSearchParams) SetPerPage(perPage *string) {
	o.PerPage = perPage
}

// WithQ adds the q to the get search params
func (o *GetSearchParams) WithQ(q string) *GetSearchParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the get search params
func (o *GetSearchParams) SetQ(q string) {
	o.Q = q
}

// WithRemix adds the remix to the get search params
func (o *GetSearchParams) WithRemix(remix *string) *GetSearchParams {
	o.SetRemix(remix)
	return o
}

// SetRemix adds the remix to the get search params
func (o *GetSearchParams) SetRemix(remix *string) {
	o.Remix = remix
}

// WithSort adds the sort to the get search params
func (o *GetSearchParams) WithSort(sort *string) *GetSearchParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get search params
func (o *GetSearchParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithSupport adds the support to the get search params
func (o *GetSearchParams) WithSupport(support *string) *GetSearchParams {
	o.SetSupport(support)
	return o
}

// SetSupport adds the support to the get search params
func (o *GetSearchParams) SetSupport(support *string) {
	o.Support = support
}

// WithTech adds the tech to the get search params
func (o *GetSearchParams) WithTech(tech *string) *GetSearchParams {
	o.SetTech(tech)
	return o
}

// SetTech adds the tech to the get search params
func (o *GetSearchParams) SetTech(tech *string) {
	o.Tech = tech
}

// WriteToRequest writes these params to a swagger request
func (o *GetSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cat != nil {

		// query param cat
		var qrCat string

		if o.Cat != nil {
			qrCat = *o.Cat
		}
		qCat := qrCat
		if qCat != "" {

			if err := r.SetQueryParam("cat", qCat); err != nil {
				return err
			}
		}
	}

	if o.CommercialUse != nil {

		// query param commercial_use
		var qrCommercialUse string

		if o.CommercialUse != nil {
			qrCommercialUse = *o.CommercialUse
		}
		qCommercialUse := qrCommercialUse
		if qCommercialUse != "" {

			if err := r.SetQueryParam("commercial_use", qCommercialUse); err != nil {
				return err
			}
		}
	}

	if o.Complexity != nil {

		// query param complexity
		var qrComplexity string

		if o.Complexity != nil {
			qrComplexity = *o.Complexity
		}
		qComplexity := qrComplexity
		if qComplexity != "" {

			if err := r.SetQueryParam("complexity", qComplexity); err != nil {
				return err
			}
		}
	}

	if o.Exclusive != nil {

		// query param exclusive
		var qrExclusive string

		if o.Exclusive != nil {
			qrExclusive = *o.Exclusive
		}
		qExclusive := qrExclusive
		if qExclusive != "" {

			if err := r.SetQueryParam("exclusive", qExclusive); err != nil {
				return err
			}
		}
	}

	if o.Featured != nil {

		// query param featured
		var qrFeatured string

		if o.Featured != nil {
			qrFeatured = *o.Featured
		}
		qFeatured := qrFeatured
		if qFeatured != "" {

			if err := r.SetQueryParam("featured", qFeatured); err != nil {
				return err
			}
		}
	}

	if o.Order != nil {

		// query param order
		var qrOrder string

		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {

			if err := r.SetQueryParam("order", qOrder); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage string

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := qrPage
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage string

		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := qrPerPage
		if qPerPage != "" {

			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}
	}

	// query param q
	qrQ := o.Q
	qQ := qrQ
	if qQ != "" {

		if err := r.SetQueryParam("q", qQ); err != nil {
			return err
		}
	}

	if o.Remix != nil {

		// query param remix
		var qrRemix string

		if o.Remix != nil {
			qrRemix = *o.Remix
		}
		qRemix := qrRemix
		if qRemix != "" {

			if err := r.SetQueryParam("remix", qRemix); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if o.Support != nil {

		// query param support
		var qrSupport string

		if o.Support != nil {
			qrSupport = *o.Support
		}
		qSupport := qrSupport
		if qSupport != "" {

			if err := r.SetQueryParam("support", qSupport); err != nil {
				return err
			}
		}
	}

	if o.Tech != nil {

		// query param tech
		var qrTech string

		if o.Tech != nil {
			qrTech = *o.Tech
		}
		qTech := qrTech
		if qTech != "" {

			if err := r.SetQueryParam("tech", qTech); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
