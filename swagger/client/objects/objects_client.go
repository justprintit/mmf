// Code generated by go-swagger; DO NOT EDIT.

package objects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new objects API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for objects API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetFilesFileID(params *GetFilesFileIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFilesFileIDOK, error)

	GetObjectsObjectID(params *GetObjectsObjectIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetObjectsObjectIDOK, error)

	GetObjectsObjectIDFiles(params *GetObjectsObjectIDFilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetObjectsObjectIDFilesOK, error)

	GetObjectsObjectIDPrints(params *GetObjectsObjectIDPrintsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetObjectsObjectIDPrintsOK, error)

	GetObjectsObjectIDUploadStatus(params *GetObjectsObjectIDUploadStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetObjectsObjectIDUploadStatusOK, error)

	PatchObject(params *PatchObjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchObjectOK, error)

	PostObject(params *PostObjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostObjectOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetFilesFileID Information of a file including the download link
*/
func (a *Client) GetFilesFileID(params *GetFilesFileIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFilesFileIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFilesFileIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetFilesFileID",
		Method:             "GET",
		PathPattern:        "/files/{file_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFilesFileIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFilesFileIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetFilesFileID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetObjectsObjectID Get information about an object.
*/
func (a *Client) GetObjectsObjectID(params *GetObjectsObjectIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetObjectsObjectIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetObjectsObjectIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetObjectsObjectID",
		Method:             "GET",
		PathPattern:        "/objects/{object_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetObjectsObjectIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetObjectsObjectIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetObjectsObjectID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetObjectsObjectIDFiles Get the list of files of the object.
*/
func (a *Client) GetObjectsObjectIDFiles(params *GetObjectsObjectIDFilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetObjectsObjectIDFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetObjectsObjectIDFilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetObjectsObjectIDFiles",
		Method:             "GET",
		PathPattern:        "/objects/{object_id}/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetObjectsObjectIDFilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetObjectsObjectIDFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetObjectsObjectIDFiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetObjectsObjectIDPrints Get the list of prints of the object.
*/
func (a *Client) GetObjectsObjectIDPrints(params *GetObjectsObjectIDPrintsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetObjectsObjectIDPrintsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetObjectsObjectIDPrintsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetObjectsObjectIDPrints",
		Method:             "GET",
		PathPattern:        "/objects/{object_id}/prints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetObjectsObjectIDPrintsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetObjectsObjectIDPrintsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetObjectsObjectIDPrints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetObjectsObjectIDUploadStatus Check the status of an object and its files.
*/
func (a *Client) GetObjectsObjectIDUploadStatus(params *GetObjectsObjectIDUploadStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetObjectsObjectIDUploadStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetObjectsObjectIDUploadStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetObjectsObjectIDUploadStatus",
		Method:             "GET",
		PathPattern:        "/objects/{object_id}/upload_status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetObjectsObjectIDUploadStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetObjectsObjectIDUploadStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetObjectsObjectIDUploadStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchObject Sent object metadata.
*/
func (a *Client) PatchObject(params *PatchObjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchObjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchObjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchObject",
		Method:             "PATCH",
		PathPattern:        "/object",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchObjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchObjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchObject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostObject Sent object metadata.
*/
func (a *Client) PostObject(params *PostObjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostObjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostObjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostObject",
		Method:             "POST",
		PathPattern:        "/object",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostObjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostObjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostObject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
